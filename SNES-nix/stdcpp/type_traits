#ifndef __type_traits_2018_05_14_10_27
#define __type_traits_2018_05_14_10_27
#include <cstdlib>
#include <utility>
#include <type_info>

#pragma macros import("__enum_underlying_type",type) define("__enum_underlying_type",type)
#pragma macros import("__is_trivial",expn) define("__is_trivial",expn)
#pragma macros import("__type_trait",type,trait) define("__type_trait",type,trait)
#pramga macros import("__inheritence_check",type,trait) define("__inheritence_check",type,trait)
namespace std{

  [[stdcpp::optimization_candidate,no_odr_use]] template<typename T> T&& declval();
  
  [[stdcpp::optimizaiton_candidate,no_odr_use]] template<> void declval<void>();
  [[stdcpp::optimizaiton_candidate,no_odr_use]] template<> const void declval<const void>();
  [[stdcpp::optimizaiton_candidate,no_odr_use]] template<> volatile void declval<volatile void>();
  [[stdcpp::optimizaiton_candidate,no_odr_use]] template<> const volatile void declval<const volatile void>();
  [[stdcpp::optimization_candidate,no_odr_use]] template<typename T> T& declval<T&>();
  [[stdcpp::optimization_candidate,no_odr_use]] template<typename T> T&& declval<T&&>();
  
  namespace helper_types{
    template<typename T,T val> struct integral_constant{
      constexpr static T value = val;
      constexpr operator T(){
        return value;
      }
      constexpr T operator()(){
        return value;
      }
      constexpr integral_constant(){}
    };
    
    template<bool b> struct boolean_constant:integral_constant<bool,b>{};

    struct true_type :boolean_constant<true>{};

    struct false_type: boolean_constant<false>{};

    template<typename T> struct is_void:public false_type{};

    template<> struct is_void<void>:public true_type{};

    template<> struct is_void<const void>:public true_type{};

    template<> struct is_void<volatile void>:public true_type{};

    template<> struct is_void<const volatile void>:public true_type{};

    template<typename... Args> using void_t = void;
    
    tempalte<typename... Args> struct is_void<void_t<Args>>:true_type{}
    
    template<bool val,typename T=void> struct enable_if{};
  
    template<typename T> struct enable_if<true,T>{
      typedef T type;
    };

    template<bool val,typename T,typename U> struct conditional{
      typedef U type;
    };

    template<typename T,typename U> struct conditional<true,T,U>{
      typedef T type;
    };
    
    template<typename T,typename U> struct is_same:false_type{};
    
    //If the Arguments are exactly the same type then they are the same
    template<typename T> struct is_same<T,T>:true_type{};
    
    //Otherwise, if the 2 types are potentially cv-qualified void, then they are the same.
    template<typename T,typename U> struct is_same<typename enable_if<is_void<T>::value,T>::type,typename enable_if<is_void<U>::value,U>::type>:true_type{};
    
    //Otherwise leave it up to the template type origin locator
    //This includes the fact that signed <integral-type> is the same as <integral-type>
  };
  using namespace helper_types;
  namespace primary_type_categories{
    template<typename T> struct is_nullptr:public false_type{};

    template<> struct is_nullptr<nullptr_t>:public true_type{};
    template<> struct is_nullptr<const nullptr_t>:public true_type{};
    template<> struct is_nullptr<volatile nullptr_t>:public true_type{};
    template<> struct is_nullptr<const volatile nullptr_t>:public true_type{};
  
    template<typename T> struct is_integral:public false_type{};

    template<typename T> struct is_integral<const T>:is_integral<T>{};

    template<typename T> struct is_integral<volatile T>:is_integral<T>{};

    template<typename T> struct is_integral<const volatile T>:is_integral<T>{};

    template<> struct is_integral<char>:public true_type{};

    template<> struct is_integral<short>:public true_type{};

    template<> struct is_integral<int>: public true_type{};

    template<> struct is_integral<long>:public true_type{};

    template<> struct is_integral<long long>:public true_type{};

    template<> struct is_integral<unsigned char>:public true_type{};

    template<> struct is_integral<unsigned short>:public true_type{};

    template<> struct is_integral<unsigned int>: public true_type{};

    template<> struct is_integral<unsigned long>:public true_type{};

    template<> struct is_integral<unsigned long long>:public true_type{};

    template<typename T> struct is_floating_point:false_type{};

    template<typename T> struct is_floating_point<const T>:is_floating_point<T>{};

    template<typename T> struct is_floating_point<volatile T>:is_floating_point<T>{};

    template<typename T> struct is_floating_point<const volatile T>:is_floating_point<T>{};

    template<> struct is_floating_point<float>:true_type{};

    template<> struct is_floating_point<double>:true_type{};

    template<> struct is_floating_point<long double>:true_type{};

    template<typename T> struct is_array:false_type{};

    template<typename T> struct is_array<const T>:is_array<T>{};

    template<typename T> struct is_array<volatile T>:is_array<T>{};

    template<typename T> struct is_array<const volatile T>:is_array<T>{};

    template<typename T> struct is_array<T[]>:true_type{};

    template<typename T,size_t N> struct is_array<T[N]>:true_type{};

    
    template<typename T> struct underlying_type;
    template<typename T> struct underlying_type<typename std::conditional<false,__enum_underlying_type(T),T>::type>:echo_type<__enum_underlying_type(T)>{};
   

    template<typename T> struct is_enum:false_type{};

    //SFINAE Implementation of is_enum
    template<typename T> struct is_enum<typename enable_if<is_same<void_t<typename underlying_type<T>::type>,void_t<>>::value,T>::type>:true_type{};

    //Uses compiler level overloads
    template<typename T> struct is_class:false_type{};

    //Uses compiler level overloads
    template<typename T> struct is_union:false_type{};

    template<typename T> struct is_function:false_type{};

    template<typename T,typename... Args> struct is_function<T(Args...)>:true_type{};

    template<typename T> struct is_pointer:false_type{};

    template<typename T> struct is_pointer<T*>:true_type{};

    template<typename T> struct is_pointer<T* const>:true_type{};

    template<typename T> struct is_pointer<T* volatile>:true_type{};

    template<typename T> struct is_pointer<T* const volatile>:true_type{};

    template<typename T> struct is_lvalue_reference:false_type{};

    template<typename T> struct is_lvalue_reference<T&>:true_type{};

    template<typename T> struct is_rvalue_reference:false_type{};

    template<typename T> struct is_rvalue_reference<T&&>:true_type{};

    template<typename T> struct is_member_object_pointer:false_type{};

    template<typename T,class B> struct is_member_object_pointer<T B::*>:true_type{};

    template<typename T,class B> struct is_member_object_pointer<T B::* const>:true_type{};
    template<typename T,class B> struct is_member_object_pointer<T B::* volatile>:true_type{};
    template<typename T,class B> struct is_member_object_pointer<T B::* const volatile>:true_type{};

    template<typename T> struct is_member_function_pointer:false_type{};

    template<typename T,class B,typename... Args> struct is_member_function_pointer<T (B::*)(Args...)>:true_type{};
  
  };
  using namespace primary_type_categories;
  namespace composite_type_categories{
    template<typename T> struct is_fundemental:false_type{};

    template<typename T> struct is_fundemental<typename enable_if<is_void<T>::value||is_nullptr<T>::value||is_integral<T>::value||is_floating_point<T>::value,T>::type>: true_type{};

    template<typename T> struct is_arithmetic:false_type{};

    template<typename T> struct is_arithemtic<typename enable_if<is_integral<T>::value||is_floating_point<T>::value>::type>:true_type{};

    template<typename T> struct is_scalar:false_type{};

    template<typename T> struct is_scalar<typename enable_if<is_arithmetic<T>::value||is_pointer<T>::value||
        is_member_object_pointer<T>::value||is_member_function_pointer<T>::value||is_nullptr<T>:value
        ||is_enum<T>::value,T>::type>:true_type{};

     template<typename T> struct is_object:true_type{};

     template<typename T> struct is_object<typename enable_if<is_void<T>::value||is_lvalue_reference<T>::value||is_rvalue_reference<T>::value,T>::type>:false_type{};

     template<typename T> struct is_compound:false_type{};

     template<typename T> struct is_compound<typename enable_if<is_object<T>::value,T*>::type>:true_type{};

     template<typename Ret,typename... Args> struct is_compound<Ret(*)(Args...)>:true_type{};

     template<typename T> struct is_compound<typename enable_if<is_pointer_to_member_object<T>::value||
        is_pointer_to_member_function<T>::value||is_lvalue_reference<T>::value||is_rvalue_reference<T>::value||
        is_array<T>::value||is_class<T>::value||is_union<T>::value||is_enum<T>::value,T>::true_type{};

    template<typename T> struct is_reference:false_type{};

    template<typename T> struct is_reference<T&>:true_type{};

    template<typename T> struct is_reference<T&&>:true_type{};

    template<typename T> struct is_member_pointer:false_type{};

    template<typename T> struct is_member_pointer<typename enable_if<is_pointer_to_member_object<T>::value
    ||is_pointer_to-member_function<T>::value,T>::type>:true_type{};
 };
 using namespace composite_type_categories
 namespace type_properties{
   template<typename T> struct is_const:false_type{};

   template<typename T> struct is_const<const T>:true_type{};

   template<typename T> struct is_const<const volatile T>:true_type{};

   template<typename T> struct is_volatile:false_type{};

   template<typename T> struct is_volatile<volatile T>:true_type{};

   template<typename T> struct is_volatile<const volatile T>:true_type{};
  
   template<typename T> struct is_trivialialy_copyable:false_type{};
   //SFINAE overload for is_scalar 
   template<typename T> struct is_trivially_copyable<typename enable_if<is_scalar<T>::value,T>::type>: true_type{};
   
   template<typename T> struct is_trivially_copyable<typename enable_if<__is_trivial(declval<T&>()=declval<const T&>())||
        __is_trivial(T(declval<const T&>())),T>::type>:true_type{};
   
   template<typename T struct is_trivial:false_type{};
   
   //SFINAE overload for is_scalar
   template<typename T> struct is_trivial<typename enable_if<is_scalar<T>:value,T>::type>:true_type{};
   
   template<typename T> struct is_trivial<typename enable_if<__type_trait(T,trivial),T>::type>:true_type{};
   
   template<typename T> struct is_standard_layout:true_type{};
   
   template<typename T> struct is_standard_layout<typename enable_if<__inheritence_check(T,standard_layout),T>::type>:true_type{};
   
   [[deprecated("POD is Deprecated as of C++20")]] template<typename T> struct is_pod:false_type{};
    template<typename T> are_all_members_pod:false_type{};
    //Overloads are compiler assisted
   [[deprecated("POD is Deprecated as of C++20")]] template<typename T> struct is_pod<typename enable_if<is_scalar<T>::value,T>::type>:true_type{};
   
   [[deprecated("POD is Deprecated as of C++20")]] template<typename T> struct is_pod<typename enable_if<__type_trait(T,pod),T>::type>:true_type{};
   
   [[deprecated("LiteralType is Deprecated as of C++17")]] template<typename T> struct is_literal_type:false_type{};
   
   //SFINAE Overload for is_scalar and is_void
   [[deprecated("LiteralType is Deprecated as of C++17")]] template<typename T>
    struct is_literal_type<typename enable_if<is_void<T>::value,T>::type>:true_type{};
    
    template<typename T> constexpr bool is_literal_type_helper(T){
      return true;
    }
    
   [[deprecated("LiteralType is Deprecated as of C++17")]] template<typename T>
    struct is_literal_type<typename enable_if<noexcept(is_literal_type_helper<T>(declval<T>())),T>::type>:true_type{};
   
   template<typename T> struct has_unique_object_representation:false_type{};
   
   template<typename T> struct has_unique_object_representation<typename enable_if<is_scalar<T>::value,T>::type>:true_type{};
   
   template<typename T> struct has_unique_object_representation<typename enable_if<__type_trait(T,unique_representation),T>::type>:true_type{};
   
   template<typename T> struct is_empty:false_type{};
   
   template<typename T> struct is_empty<typename enable_if<__type_trait(T,empty),T>::type>:true_type{};
   
   template<typename T> constexpr bool is_polymorphic_helper(){
    typeid(*decltype<T*>());
    return true;
   }
   
   
   template<typename T> struct is_polymorphic:true_type{};
   
   
   template<typename T> struct is_polymorphic<typename enable_if<is_polymorphic_helper<T>(),T>::type>:false_type{};
   
   
   //Class Overloads are Compiler assisted
   
   
   
   template<typename T> struct is_abstract:false_type{};
   
   
   template<typename T> struct is_abstract<typename enable_if<__type_trait(T,abstract),T>::type>:true_type{};
    
   
   template<typename T> struct is_final:false_type{};
   
   template<typename T> struct is_final<typename enable_if<__type_trait(T,final),T>::type>:true_type{};
   
   
   template<typename T> struct is_aggregate:false_type{};
   
   template<typename T> struct is_aggregate<typename enable_if<is_array<T>::value,T>::type>:true_type{};
   
   template<typename T> struct is_aggregate<typename enable_if<__type_trait(T,aggregate),T>::type>:true_type{};
   
   template<typename T> struct is_signed:false_type{};
   
   template<typename T> struct is_signed<typename enable_if<is_arithmetic<T>::value&&(T(-1)<T(0)),T>::type>{};
   
   template<typename T> struct is_unsigned:false_type{};
   
   template<typename T> struct is_unsigned<typename enable_if<is_arithmetic<T>::value&&!is_signed<T>::value,T>::type>{};
 };
 
 using namespace type_properties;
 
 namespace type_modification{
  template<typename T> struct echo_type{
    typedef T type;
  };
 
  template<typename T> struct remove_cv : echo_type<T>{};
  template<typename T> struct remove_cv<const T>:remove_cv<T>{};
  template<typename T> struct remove_cv<volatile T>:remove_cv<T>{};
  template<typename T> struct remove_cv<const volatile T>:echo_type<T>{};
  
  template<typename T> struct remove_const : echo_type<T>{};
  
  template<typename T> struct remove_const<const T>: echo_type<T>{};
  
  template<typename T> struct remove_const<const volatile T>:echo_type<volatile T>{};
  
  template<typename T> struct remove_volatile: echo_type<T>{};
  
  template<typename T> struct remove_volatile<volatile T>:echo_type<T>{};
  
  template<typename T> struct remove_volatile<const volatile T>:echo_type<T>{};
  
  template<typename T> struct add_cv: echo_type<const volatile T>{};
  
  template<typename T> struct add_cv<const T>: echo_type<const volatile T>{};
  
  template<typename T> struct add_cv<volatile T>:echo_type<const volatile T>{};
  
  template<typename T> struct add_cv<const volatile T>: echo_type<const volatile T>{};
  
  template<typename T> struct add_const:echo_type<const T>{};
  
  template<typename T> struct add_const<const T>:echo_type<const T>{};
  
  template<typename T> struct add_const<volatile T>:echo_type<const volatile T>{};
  
  template<typename T> struct add_const<const volatile T>:echo_type<const volatile T>{};
  
  template<typename T> struct remove_reference:echo_type<T>{};
  
  template<typename T> struct remove_reference<T&>:echo_type<T>{};
  
  template<typename T> struct remove_reference<T&&>:echo_type<T>{};
  
  template<typename T> struct add_lvalue_reference:echo_type<T&>{};
  
  template<typename T> struct add_lvalue_reference<T&>:echo_type<T&>{};
  
  template<typename T> struct add_lvalue_reference<T&&>:echo_type<T&>{};
  
  template<typename Ret,typename... Args> struct add_lvalue_reference<Ret(Args...)const>:echo_type<Ret(Args...)const>{};
  template<typename Ret,typename... Args> struct add_lvalue_reference<Ret(Args...)volatile>:echo_type<Ret(Args...)volatile>{};
  template<typename Ret,typename... Args> struct add_lvalue_reference<Ret(Args...)const volatile>:echo_type<Ret(Args...)const volatile>{};
  template<typename Ret,typename... Args> struct add_lvalue_reference<Ret(Args...)&>:echo_type<Ret(Args...)&>{};
  template<typename Ret,typename... Args> struct add_lvalue_reference<Ret(Args...)&&>:echo_type<Ret(Args...)&&>{};
  
  template<typename T> struct add_rvalue_reference:echo_type<T&&>{};
  
  template<typename T> struct add_rvalue_reference<T&>:echo_type<T&>{};
  template<typename Ret,typename... Args> struct add_rvalue_reference<Ret(Args...)const>:echo_type<Ret(Args...)const>{};
  template<typename Ret,typename... Args> struct add_rvalue_reference<Ret(Args...)volatile>:echo_type<Ret(Args...)volatile>{};
  template<typename Ret,typename... Args> struct add_rvalue_reference<Ret(Args...)const volatile>:echo_type<Ret(Args...)const volatile>{};
  template<typename Ret,typename... Args> struct add_rvalue_reference<Ret(Args...)&>:echo_type<Ret(Args...)&>{};
  template<typename Ret,typename... Args> struct add_rvalue_reference<Ret(Args...)&&>:echo_type<Ret(Args...)&&>{};
  
  template<typename T> struct add_rvalue_reference<T&&>:echo_type<T&&>{};
  
  template<typename T> struct remove_pointer:echo_type<T>{};
  
  template<typename T> struct remove_pointer<T*>:echo_type<T>{};
  
  template<typename T> struct add_pointer:echo_type<T*>{};
  template<typename T> struct add_pointer<T&>:echo_type<T*>{};
  template<typename T> struct add_pointer<T&&>:echo_type<T*>{};
  
  template<typename Ret,typename... Args> struct add_pointer<Ret(Args...)const>:echo_type<Ret(Args...)const>{};
  template<typename Ret,typename... Args> struct add_pointer<Ret(Args...)volatile>:echo_type<Ret(Args...)volatile>{};
  template<typename Ret,typename... Args> struct add_pointer<Ret(Args...)const volatile>:echo_type<Ret(Args...)const volatile>{};
  template<typename Ret,typename... Args> struct add_pointer<Ret(Args...)&>:echo_type<Ret(Args...)&>{};
  template<typename Ret,typename... Args> struct add_pointer<Ret(Args...)&&>:echo_type<Ret(Args...)&&>{};
  
  template<typename T> struct make_signed;
  
  template<typename T> struct make_signed<typename enable_if<is_signed<T>::value,T>::type>:echo_type<T>{};
  
  template<typename T> struct make_signed<unsigned char>:echo_type<char>{};
  
  template<typename T> struct make_signed<unsigned short>:echo_type<short>{};
  
  template<typename T> struct make_signed<unsigned int>:echo_type<int>{};
  
  template<typename T> struct make_signed<unsigned long>:echo_type<long>{};
  
  template<typename T> struct make_signed<unsigned long long>:echo_type<long long>{};
  
  template<typename T> struct make_unsigned;
  
  template<typename T> struct make_unsigned<typename enable_if<is_unsigned<T>::value,T>::type>:echo_type<T>{};
  
  template<typename T> struct make_unsigned<char>:echo_type<unsigned char>{};
  
  template<typename T> struct make_unsigned<short>:echo_type<unsigned short>{};
  
  template<typename T> struct make_unsigned<int>:echo_type<unsigned int>{};
  
  template<typename T> struct make_unsigned<long>:echo_type<unsigned long>{};
  
  template<typename T> struct make_unsigned<long long>:echo_type<unsigned long long>{};
  
  template<typename T> struct remove_extent:echo_type<T>{};
  
  template<typename T> struct remove_extent<T[]>:echo_type<T>{};
  
  template<typename T,size_t size> struct remove_extent<T[size]>:echo_type<T>{};
  
  template<typename T> struct remove_all_extents:echo_type<T>{};
  
  template<typename T> struct remove_all_extents<T[]>:remove_all_extents<T>{};
  
  template<typename T,size_t size> struct remove_all_extents<T[size]>:remove_all_extents<T>{};
  
  template<typename T,size_t dim=0> struct extent:integral_constant<unsigned,0>{};
  
  template<typename T,size_t dim,size_t size> struct extent<T[size],0>:integral_constant<unsigned,size>{};
  
  template<typename T,size_t dim> struct extent<T[],dim>:extent<T,dim-1>{};
  
  template<typename T,size_t dim,size_t size> struct extent<T[size],dim>:extent<T,dim-1>{};
  
  template<typename T> struct decay:echo_type<typename remove_cv<typename remove_reference<T>::type>::type>{};
  
  template<typename T> struct rank:integral_constant<unsigned,0>{};
  
  template<typename T> struct rank<T[]>:integral_constant<unsigned,rank<T>::value+1>{};
  
  template<typename T,size_t size> struct rank<T[size]>:integral_constant<unsigned,rank<T>::value+1>{};
  
  template<typename T> struct decay<T[]>:echo_type<T*>{};
  
  template<typename T> struct decay<T(&)[]>:echo_type<T*>{};
  
  template<typename T,size_t size> struct decay<T[size]>:echo_type<T*>{};
  
  template<typename T,size_t size> struct decay<T(&)[size]>:echo_type<T*>{};
  
  template<typename Ret,typename... Args> struct deacy<Ret(Args...)>:echo_type<Ret(*)(Args...)>{};
  
  template<typename Ret,typename... Args> struct decay<Ret(&)(Args...)>:echo_type<Ret(*)(args...)>{};
  
  template<typename T> struct remove_cvref:remove_cv<typename remove_reference<T>::type>{};
  
  template<class T,class... Args> struct is_invocable:false_type{};
  
  template<class Ret,class... Args> struct is_invocable<Ret(Args...),Args>:true_type{};
  
  template<class Ret,class... Args> struct is_invocable<Ret(&)(Args...),Args>:true_type{};
  template<class Ret,class... Args> struct is_invocable<Ret(*)(Args...),Args>:true_type{};
  
  template<class T,class... Args> struct is_invocable<typename conditional<false,decltype(declval<T>()(declval<Args>()...)),T>::type,Args>:true_type{};
  
  template<class Ret,class T,class... Args> struct is_invocable_r:false_type{};
  
  template<class Ret,class... Args> struct is_invocable_r<Ret,Ret(Args...),Args>:true_type{};
  
  template<class Ret,class T,class... Args> concept InvocableReturnType = requires(T t,Args... a){
    {t(std::foward(a)...};}->Ret;
  }
  
  InvocableReturnType{Ret,T,Args...} struct is_invocable_r<Ret,T,Args...>:true_type{};
  
  template<class T,class... Args> struct is_nothrow_invocable:false_type{};
  
  template<class Ret,class... Args> struct is_nothrow_invocable<Ret(Args...)noexcept>:true_type{};
  
  template<class T,class... Args> struct is_nothrow_invocable<typename enable_if<nothrow(declval<T>()(declval<Args>()...)),T>::type,Args>:true_type{};
  
  template<class Ret,class T,class... Args> struct is_nothrow_invocable_r:false_type{};
  
  template<class Ret,class... Args> struct is_nothrow_invocable_r<Ret,Ret(Args...)noexcept,Args>:true_type{};
  
  template<class Ret,class T,class... Args> concept NoThrowInvocable = requires(T t,Args... a){
    {t(std::forward(a)...);}noexcept ->Ret;
  }
  
  NoThrowInvocable{Ret,T,Args...} struct is_nothrow_invocable_r<Ret,T,Args>:true_type{};
  
   
  template<size_t Len,class... Types> struct alligned_union{
    static constexpr std::size_t alignment_value = std::max({alignof(Types)...});
    struct type
    {
      alignas(alignment_value) char _s[std::max({Len, sizeof(Types)...})];
    };
  };
  
  template<std::size_t Len, std::size_t Align=0>
    struct aligned_storage {
      struct type {
          alignas(Align) unsigned char data[Len];
      };
    };
 };
 using namespace type_modification;
  
 namespace misc{
  template<typename... Types> struct common_type;
  
  template<> struct common_type<>{};
  
  template<typename T> struct common_type<T>:echo_type<T>{};
  
  template<typename T,typename U,typename... Rest> struct common_type<T,U,Rest>:common_type<common_type<T,U>,Rest>{};
  
  template<class Base,class Derived> struct is_base_of:false_type{};
  
  template<class A,class B> struct is_base_of<typename enable_if<is_const<A>::value||is_volatile<A>::value||is_const<B>::value||is_volatile<B>::value,A>::type,B>
  `:is_base_of<typename remove_cv<A>::type,typename remove_cv<B>::type>{};
  template<class T> struct is_base_of<typename enable_if<std::is_class<T>::value,T>::type,T>:true_type{};
  
  namespace _hidden{
  
    [[stdcpp::optimization_candidate,no_odr]] template<typename Base> true_type test_is_base_of(const Base*);
    [[stdcpp::optimizaiton_candidate,no_odr]] template<typename Base> false_type test_is_base_of(const void*);

    template<typename Base,typename Derived> using is_base_of_target = 
      decltype((test_is_base_of<Base>(declval<typename add_pointer<typename remove_cvref<Derived>::type>::type>()));
  
  };
  
  template<class Base,class Derived> struct is_base_of<typename enable_if<_hidden::is_base_of_target<Base,Derived>::value,Base>::type,Derived>:true_type{};
 
 template<typename T> struct allignment_of:integral_constant<size_t,alignof(T)>{};
 
 template<typename T,size_t size> struct allignment_of<T[size]>:integral_constant<size_t,alignof(T)>{};
 };
 
 using namespace misc;
  
 namespace operators{
  template<class T,class... Args> struct is_constructible:false_type{};
  template<class T,class... Args> struct is_constructible<typename 
    enable_if<is_reference<T>::value||is_object<T>::value,typename conditional<false,decltype(T(declval<Args>()...)),T>::type>::type,Args>:true_type{};
  
  template<class T,class... Args> struct is_noexcept_constructible:false_type{};
  
  template<class T,class... Args> struct is_noexcept_constructible<typename enable_if<!is_constructible<T,Args>::value,T>::type,T>::type,Args>:false_type{};
  
  template<class T,class... Args> struct is_noexcept_constructible<typename enable_if<noexcept(T(declval<Args>()...)),T>::type>:true_type{};
  
  template<class T,class... Args> struct is_trivially_constructible:false_type{};
  
  template<class T,class... Args> struct is_trivially_constructible<typename enable_if<__is_trivial(T(declval<Args>()...)),T>::type>:true_type{};
  
  template<class T> struct is_default_constructible:is_constructible<T>{};
  
  template<class T> struct is_noexcept_default_constructible:is_noexcept_constructible<T>{};
  
  template<class T> struct is_trivially_default_constructible:is_trivially_constructible<T>{};
  
  template<class T> struct is_copy_constructible:is_constructible<T,const T&>{};
  
  template<class T> struct is_noexcept_copy_constructible:is_noexcept_constructible<T,const T&>{};
  
  template<class T> struct is_trivially_copy_constructible:is_trivially_constructible<T,const T&>{};
  
  template<class T> struct is_move_constructible:is_constructible<T,T&&>{};
  
  template<class T> struct is_noexcept_move_constructible:is_noexcept_constructible<T,T&&>{};
  
  template<class T> struct is_trivially_move_constructible:is_trivially_constructible<T,T&&>{};
  
  template<class T,class U> struct is_assignable:false_type{};
  
  template<class T,class U> struct is_assignable<typename conditional<false,decltype(declval<T>().operator=(declval<U>())),T>::type,U>:true_type{};
  
  template<class T,class U> struct is_noexcept_assignable:false_type{};
  
  template<class T,class U> struct is_noexcept_assignable<typename enable_if<!is_assignable<T,U>::value,T>::type,U>:false_type{};
  
  template<class T,class U> struct is_noexcept_assignable<typename enable_if<noexcept(declval<T>().operator=(declval<U>())),T>::type,U>:true_type{};
  
  template<class T,class U> struct is_trivially_assignable:false_type{};
  
  template<class T,class U> struct is_trivially_assignable<typename enable_if<__is_trivial(declval<T>().operator=(declval<U>()))),T>::type,U>:true_type{};
  
  template<class T> struct is_copy_assignable:is_assignable<T,const T&>{};
  
  template<class T> struct is_noexcept_copy_assignable:is_noexcept_assignable<T,const T&>{};
  
  template<class T> struct is_trivially_copy_assignable:is_trivially_assignable<T,const T&>{};
  
  template<class T> struct is_move_assignable:is_assignable<T,T&&>{};
  
  template<class T> struct is_noexcept_move_assignable:is_noexcept_assignable<T,T&&>{};
  
  template<class T> struct is_trivially_move_assignable:is_trivially_assignable<T,T&&>{};
  
  template<class T> struct is_destructible:false_type{};
  
  template<class T> struct is_destructible<typename conditional<false,decltype(declval<T>().~T(),T>::type>:true_type{};
  
  template<class T> struct is_noexcept_destructible:false_type{};
  
  template<class T> struct is_noexcept_destructible<typename enable_if<!is_destructible<T>::value,T>::type>:false_type{};
  
  template<class T> struct is_noexcept_destructible<typename enable_if<noexcept(declval<T>().~T()),T>::type>:true_type{};
  
  template<class T> struct is_trivially_destructible:false_type{};
  
  template<class T> struct is_trivially_destructible<typename enable_if<__is_trivial(declval<T>().~T()),T>::type>:true_type{};
  
  template<class T> struct has_virtual_destructor:false_type{};
  //Overloads are compiler assisted
  
  template<class T,class U> struct is_swappable_with:false_type{};
  
  template<class T,class U> struct is_swappable_with<typename conditional<false,decltype(swap(declval<T>(),declval<U>())),T>::type,T>:true_type{};
  
  template<class T> struct is_swappable:is_swappable_with<T,T>{};
  
  template<class T,class U> struct is_noexcept_swappable_with:false_type{};
  
  template<class T,class U> struct is_noexcept_swappable_with<typename enable_if<noexcept(swap(declval<T>(),declval<U>())),T>::type,U>:true{};
  
  template<class T> struct is_noexcept_swappable:is_noexcept_swappable_with<T,T>{};
  
  template<class From,class To> struct is_convertible:false_type{};
  
  template<class T> struct is_convertible<T,T>:true_type{};
  
  template<class From,class To> struct is_convertible<typename enable_if<is_constructible<To,From>::value,T>::type,U>:true_type{};
  
  template<class From,class To> struct is_convertible<typename conditional<false,decltype(declval<From>().operator To()),From>::type,To>:true_type{};
  
  template<class T,class... Args> struct invoke_result;
  
  template<class T,class... Args> struct invoke_result<typename conditional<false,decltype(declval<T>()(declval<Args>()...)),T>::type>:echotype<decltype(declval<T>()(declval<Args>()...))>{};
  
  template<class> struct result_of;
  
  template<class F,class... Args> struct result_of<F(Args...)>: invoke_result<F(Args...),Args...>{};
  
 };
 using namespace operators;
 
 namespace booloperators{
  template<class... Traits> struct conjunction{};
  template<> struct conjunction<>:true_type{};
  template<class First,class... Rest> struct conjunction<typename enable_if<!bool(First::value),First>::type,Rest>:false_type{};
  tempalte<class First,class... Rest> struct conjunction<typename enable_if<bool(First::value),First>::type,Rest>:conjunction<Rest>{};
  
  template<class... Traits> struct disjunction{};
  template<> struct disjunction<>:false_type{};
  template<class First,class... Rest> struct disjunction<typename enable_if<bool(First::value),First>::type,Rest>:true_type{};
  template<class First,class... Rest> struct disjunction<typename enable_if<!bool(First::value),First>::type,Rest>:disjunction<Rest>{};
  
  template<class Input> struct negation:conditional<bool(Input::value),true_type,false_type>::type{};
 };
 using namespace booloperators;
 
 enum class endian{
  little,
  big,
  native = little
 };
};
#endif
