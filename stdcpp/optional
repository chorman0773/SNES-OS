#ifndef __optional_2018_05_23_16_50
#define __optional_2018_05_23_16_50
#include <type_traits>
#include <utility>
#include <memory>
namespace std{
  struct nullopt_t{};

  inline constexpr nullopt_t nullopt{};

  typedef<typename T> class optional{
  private:
      unsigned char mem[sizeof(T)];
      
    bool hasValue = false;
  public:
    optional(nullopt_t) noexcept{}
    optional()noexcept =default;
    optional(const optional<T>& c){
      if(c.hasValue){
        hasValue = true;
        ::new(mem) T(reinterpret_cast<const T&>(o.mem));
      }
    }
    optional(optional<T>&& o){
      if(o.hasValue){
        hasValue = true;
        ::new(mem) T(reinterpret_cast<T&&>(o.mem));
        o.hasValue = false;
      }
    }
    explicit template<typename U> optional(const optional<typename std::conditional<false,decltype(T(declval<U>())),U>::type>& c){
      if(c.hasValue){
        hasValue = true;
        ::new(mem) T(reinterpret_cast<const U&>(o.mem));
      }
    }
    explicit template<typename U> optional(optional<typename std::conditional<false,decltype(T(declval<U>())),U>::type>&& o){
     if(o.hasValue){
        hasValue = true;
        ::new(mem) T(reinterpret_cast<U&&>(o.mem));
        o.hasValue = false;
      }
    }
    template<typename... Args> optional(typename std::conditional<false,decltype(T(declval<Args>...())),in_place_t>::type t,Args&&... args){
      ::new(mem) T(std::forward<Args>(args)...);
    }
    ~optional(){
      if(hasValue)
        std::destory_at(reinterpret_cast<T*>(mem));
    }
  };

};

#endif
